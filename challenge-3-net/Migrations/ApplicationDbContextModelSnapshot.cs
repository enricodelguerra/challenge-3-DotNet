// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using challenge_3_net.Data;

#nullable disable

namespace challenge_3_net.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("challenge_3_net.Models.Moto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Chassi")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Motor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Chassi")
                        .IsUnique();

                    b.HasIndex("Placa")
                        .IsUnique();

                    b.HasIndex("UsuarioId");

                    b.ToTable("Motos");
                });

            modelBuilder.Entity("challenge_3_net.Models.Operacao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataOperacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long>("MotoId")
                        .HasColumnType("bigint");

                    b.Property<string>("TipoOperacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MotoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Operacoes");
                });

            modelBuilder.Entity("challenge_3_net.Models.StatusMoto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DataStatus")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("MotoId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MotoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("StatusMotos");
                });

            modelBuilder.Entity("challenge_3_net.Models.Usuario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Endereco")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NomeFilial")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Perfil")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenhaHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Telefone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Cnpj")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Cnpj = "12.345.678/0001-90",
                            DataAtualizacao = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DataCriacao = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@fiap.com",
                            Endereco = "Rua Admin, 123",
                            NomeFilial = "Admin FIAP",
                            Perfil = "ADMIN",
                            SenhaHash = "$2a$11$sP/IdKyidixV4jh6CKjkDuzye3vLNrmMOT6yxaWmhxGCqZLiClfk6",
                            Telefone = "(11) 99999-9999"
                        },
                        new
                        {
                            Id = 2L,
                            Cnpj = "12.345.678/0002-90",
                            DataAtualizacao = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DataCriacao = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "gerente@fiap.com",
                            Endereco = "Rua Gerente, 456",
                            NomeFilial = "Gerente FIAP",
                            Perfil = "GERENTE",
                            SenhaHash = "$2a$11$cqLk2fEnxWAgN1WCDI7neennmOzZMF1mL6nCFtK.c73U2rUwcyYfO",
                            Telefone = "(11) 88888-8888"
                        },
                        new
                        {
                            Id = 3L,
                            Cnpj = "12.345.678/0003-90",
                            DataAtualizacao = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DataCriacao = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "operador@fiap.com",
                            Endereco = "Rua Operador, 789",
                            NomeFilial = "Operador FIAP",
                            Perfil = "OPERADOR",
                            SenhaHash = "$2a$11$G7Nz51URhoIweSxTZDnn9ObfvjEwQW.vlbr5SH4jYtaOd18Qd4UUa",
                            Telefone = "(11) 77777-7777"
                        });
                });

            modelBuilder.Entity("challenge_3_net.Models.Moto", b =>
                {
                    b.HasOne("challenge_3_net.Models.Usuario", "Usuario")
                        .WithMany("Motos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("challenge_3_net.Models.Operacao", b =>
                {
                    b.HasOne("challenge_3_net.Models.Moto", "Moto")
                        .WithMany("Operacoes")
                        .HasForeignKey("MotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("challenge_3_net.Models.Usuario", "Usuario")
                        .WithMany("Operacoes")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Moto");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("challenge_3_net.Models.StatusMoto", b =>
                {
                    b.HasOne("challenge_3_net.Models.Moto", "Moto")
                        .WithMany("StatusMotos")
                        .HasForeignKey("MotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("challenge_3_net.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Moto");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("challenge_3_net.Models.Moto", b =>
                {
                    b.Navigation("Operacoes");

                    b.Navigation("StatusMotos");
                });

            modelBuilder.Entity("challenge_3_net.Models.Usuario", b =>
                {
                    b.Navigation("Motos");

                    b.Navigation("Operacoes");
                });
#pragma warning restore 612, 618
        }
    }
}
