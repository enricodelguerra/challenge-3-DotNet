# üß™ Script de Teste Autom√°tico - Sistema de Gest√£o de Motos API
# Execute este script para testar automaticamente a API

$baseUrl = "https://localhost:7225"
$headers = @{
    "Content-Type" = "application/json"
}

Write-Host "üöÄ Iniciando testes autom√°ticos da API..." -ForegroundColor Green
Write-Host "Base URL: $baseUrl" -ForegroundColor Yellow
Write-Host ""

# Fun√ß√£o para fazer requisi√ß√µes HTTP
function Invoke-ApiRequest {
    param(
        [string]$Method,
        [string]$Uri,
        [string]$Body = $null
    )
    
    try {
        if ($Body) {
            $response = Invoke-RestMethod -Uri $Uri -Method $Method -Headers $headers -Body $Body
        } else {
            $response = Invoke-RestMethod -Uri $Uri -Method $Method -Headers $headers
        }
        return $response
    }
    catch {
        Write-Host "‚ùå Erro na requisi√ß√£o: $($_.Exception.Message)" -ForegroundColor Red
        return $null
    }
}

# Teste 1: Verificar se a API est√° rodando
Write-Host "1Ô∏è‚É£ Testando se a API est√° rodando..." -ForegroundColor Cyan
try {
    $response = Invoke-WebRequest -Uri "$baseUrl/swagger" -Method GET
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ API est√° rodando!" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ùå API n√£o est√° rodando. Execute 'dotnet run' primeiro!" -ForegroundColor Red
    exit 1
}

# Teste 2: Criar usu√°rio
Write-Host "2Ô∏è‚É£ Criando usu√°rio de teste..." -ForegroundColor Cyan
$usuarioData = @{
    nomeFilial = "Empresa Teste"
    email = "teste@empresa.com"
    senha = "123456"
    cnpj = "99.999.999/0001-99"
    endereco = "Rua Teste, 123"
    telefone = "(11) 99999-9999"
    perfil = "ADMIN"
} | ConvertTo-Json

$usuario = Invoke-ApiRequest -Method "POST" -Uri "$baseUrl/api/Usuarios" -Body $usuarioData
if ($usuario) {
    Write-Host "‚úÖ Usu√°rio criado com ID: $($usuario.id)" -ForegroundColor Green
    $usuarioId = $usuario.id
} else {
    Write-Host "‚ùå Falha ao criar usu√°rio" -ForegroundColor Red
    exit 1
}

# Teste 3: Listar usu√°rios
Write-Host "3Ô∏è‚É£ Listando usu√°rios..." -ForegroundColor Cyan
$usuarios = Invoke-ApiRequest -Method "GET" -Uri "$baseUrl/api/Usuarios"
if ($usuarios) {
    Write-Host "‚úÖ Encontrados $($usuarios.items.Count) usu√°rios" -ForegroundColor Green
} else {
    Write-Host "‚ùå Falha ao listar usu√°rios" -ForegroundColor Red
}

# Teste 4: Criar moto
Write-Host "4Ô∏è‚É£ Criando moto de teste..." -ForegroundColor Cyan
$motoData = @{
    placa = "TEST-1234"
    chassi = "12345678901234567"
    motor = "Motor Teste 150cc"
    usuarioId = $usuarioId
} | ConvertTo-Json

$moto = Invoke-ApiRequest -Method "POST" -Uri "$baseUrl/api/Motos" -Body $motoData
if ($moto) {
    Write-Host "‚úÖ Moto criada com ID: $($moto.id)" -ForegroundColor Green
    $motoId = $moto.id
} else {
    Write-Host "‚ùå Falha ao criar moto" -ForegroundColor Red
    exit 1
}

# Teste 5: Listar motos
Write-Host "5Ô∏è‚É£ Listando motos..." -ForegroundColor Cyan
$motos = Invoke-ApiRequest -Method "GET" -Uri "$baseUrl/api/Motos"
if ($motos) {
    Write-Host "‚úÖ Encontradas $($motos.items.Count) motos" -ForegroundColor Green
} else {
    Write-Host "‚ùå Falha ao listar motos" -ForegroundColor Red
}

# Teste 6: Criar opera√ß√£o
Write-Host "6Ô∏è‚É£ Criando opera√ß√£o de teste..." -ForegroundColor Cyan
$operacaoData = @{
    tipoOperacao = "ENTREGA"
    descricao = "Opera√ß√£o de teste"
    dataOperacao = "2025-01-16T10:00:00Z"
    motoId = $motoId
    usuarioId = $usuarioId
} | ConvertTo-Json

$operacao = Invoke-ApiRequest -Method "POST" -Uri "$baseUrl/api/Operacoes" -Body $operacaoData
if ($operacao) {
    Write-Host "‚úÖ Opera√ß√£o criada com ID: $($operacao.id)" -ForegroundColor Green
    $operacaoId = $operacao.id
} else {
    Write-Host "‚ùå Falha ao criar opera√ß√£o" -ForegroundColor Red
}

# Teste 7: Listar opera√ß√µes
Write-Host "7Ô∏è‚É£ Listando opera√ß√µes..." -ForegroundColor Cyan
$operacoes = Invoke-ApiRequest -Method "GET" -Uri "$baseUrl/api/Operacoes"
if ($operacoes) {
    Write-Host "‚úÖ Encontradas $($operacoes.items.Count) opera√ß√µes" -ForegroundColor Green
} else {
    Write-Host "‚ùå Falha ao listar opera√ß√µes" -ForegroundColor Red
}

# Teste 8: Criar status
Write-Host "8Ô∏è‚É£ Criando status de teste..." -ForegroundColor Cyan
$statusData = @{
    status = "DISPONIVEL"
    descricao = "Status de teste"
    area = "Centro"
    dataStatus = "2025-01-16T08:00:00Z"
    motoId = $motoId
    usuarioId = $usuarioId
} | ConvertTo-Json

$status = Invoke-ApiRequest -Method "POST" -Uri "$baseUrl/api/StatusMotos" -Body $statusData
if ($status) {
    Write-Host "‚úÖ Status criado com ID: $($status.id)" -ForegroundColor Green
    $statusId = $status.id
} else {
    Write-Host "‚ùå Falha ao criar status" -ForegroundColor Red
}

# Teste 9: Listar status
Write-Host "9Ô∏è‚É£ Listando status..." -ForegroundColor Cyan
$statusList = Invoke-ApiRequest -Method "GET" -Uri "$baseUrl/api/StatusMotos"
if ($statusList) {
    Write-Host "‚úÖ Encontrados $($statusList.items.Count) status" -ForegroundColor Green
} else {
    Write-Host "‚ùå Falha ao listar status" -ForegroundColor Red
}

# Teste 10: Teste de valida√ß√£o (email inv√°lido)
Write-Host "üîü Testando valida√ß√£o (email inv√°lido)..." -ForegroundColor Cyan
$usuarioInvalidoData = @{
    nomeFilial = "Teste Invalido"
    email = "email-invalido"
    senha = "123456"
    cnpj = "88.888.888/0001-88"
    perfil = "ADMIN"
} | ConvertTo-Json

try {
    $response = Invoke-WebRequest -Uri "$baseUrl/api/Usuarios" -Method POST -Headers $headers -Body $usuarioInvalidoData
    Write-Host "‚ùå Valida√ß√£o falhou - deveria ter retornado erro" -ForegroundColor Red
} catch {
    if ($_.Exception.Response.StatusCode -eq 400) {
        Write-Host "‚úÖ Valida√ß√£o funcionando - email inv√°lido rejeitado" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Erro inesperado na valida√ß√£o" -ForegroundColor Red
    }
}

Write-Host ""
Write-Host "üéâ Testes autom√°ticos conclu√≠dos!" -ForegroundColor Green
Write-Host "üìä Resumo dos testes:" -ForegroundColor Yellow
Write-Host "   - API funcionando: ‚úÖ" -ForegroundColor Green
Write-Host "   - Usu√°rio criado: ‚úÖ" -ForegroundColor Green
Write-Host "   - Moto criada: ‚úÖ" -ForegroundColor Green
Write-Host "   - Opera√ß√£o criada: ‚úÖ" -ForegroundColor Green
Write-Host "   - Status criado: ‚úÖ" -ForegroundColor Green
Write-Host "   - Valida√ß√£o funcionando: ‚úÖ" -ForegroundColor Green
Write-Host ""
Write-Host "üåê Acesse o Swagger em: $baseUrl" -ForegroundColor Cyan
Write-Host "üìù Use o arquivo 'requisicoes_teste.http' para mais testes" -ForegroundColor Cyan
